#!/bin/bash

install() {
  # prepare vars
  local name="tmux"

  log::info "[$(timestamp)][package][$name] preparing ..."

  # get system os/arch
  local arch="$PACKAGE_OS_ARCH"
  local kernel="$PACKAGE_OS_KERNEL"
  local platform="$PACKAGE_OS_PLATFORM"

  # usr_bin_dir
  local usr_bin_dir="$PACKAGE_USER_BIN_DIR"
  local tmp_dir="$PACKAGE_TMP_DIR"

  # source code
  local source_code_repository="https://github.com/tmux/tmux"
  local source_code=$tmp_dir/src

  # files
  local tmp_file="$name.tar.gz"
  local bin_file="./${name}-${PACKAGE_CORE_VERSION#v}-${platform}-${arch}/$name"

  # prepare context
  cd $tmp_dir

  log::info "[$(timestamp)][package] install tmux ..."
  if [ "$BUILD_FROM_SOURCE" = "true" ]; then
    log::info "[$(timestamp)][package] building from source code($source_code_repository) ..."
    if [ -d "$source_code" ]; then
      rm -rf $source_code
    fi

    log::info "[$(timestamp)][package] install dependencies ..."
    pm install -y autoconf automake pkg-config

    if [ "$(os::is_ubuntu)" = "true" ]; then
      # libevent
      pm install -y libevent-dev
      # ncurses
      pm install -y libncurses5-dev libncursesw5-dev
      # yacc
      pm install -y bison flex
    elif [ "$(os::is_centos)" = "true" ]; then
      # libevent
      pm install -y libevent-devel
      # ncurses
      pm install -y ncurses-devel
      # yacc
      pm install -y bison flex
    elif [ "$(os::is_fedora)" = "true" ]; then
      # libevent
      pm install -y libevent-devel
      # ncurses
      pm install -y ncurses-devel
      # yacc
      pm install -y bison flex
    fi

    os::git clone --depth=1 $source_code_repository $source_code

    cd $source_code
    sh autogen.sh && ./configure && make
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][package] failed to build from source code."
      return 1
    fi

    # remove original tmux
    local tmux_bin_path=$(which tmux)
    sudo rm -f $tmux_bin_path
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][package] failed to remove origin tmux: $tmux_bin_path."
      return 1
    fi

    sudo make install
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][package] failed to install new tmux."
      return 1
    fi

    # stop current tmux server
    # sudo kill -9 $(pgrep tmux)
  else
    pm install -yqq tmux
  fi

  local PROGRAM_NAME=tmux
  local TMUX_HOME=~/.tmux
  local DESTINATION=$TMUX_HOME/plugins/tpm
  local TMUX_CONF=~/.tmux.conf
  local TMUX_PLUGIN_MANAGE_URL="https://github.com/tmux-plugins/tpm.git"

  # # Backup
  # if [ -d "$TMUX_HOME" ]; then
  #   [[ ! -d ~/.backup ]] && mkdir ~/.backup
  #   if [ -f $TMUX_CONF ]; then
  #     echo "Backup Tmux Configure to $HOME/.backup ..."
  #     [[ ! -d $TMUX_HOME ]] && mkdir $TMUX_HOME
  #     mv $TMUX_CONF $TMUX_HOME

  #     tar -zcvf ~/.backup/tmux-$(date +%Y-%m-%d-at-%H-%M).tgz $TMUX_HOME >>/dev/null 2>&1
  #   fi
  # fi

  # Clean
  if [ -d "$TMUX_HOME" ]; then
    log::info "[$(timestamp)][package] clean origin tmux to $HOME/.backup ..."
    rm -rf $TMUX_HOME >>/dev/null 2>&1
    rm -f $TMUX_CONF >>/dev/null 2>&1
  fi

  log::info "[$(timestamp)] download tmux plugin engine to $TMUX_HOME ..."
  os::git clone $TMUX_PLUGIN_MANAGE_URL $DESTINATION >>/dev/null

  log::info "[$(timestamp)][package] download tmux config ..."
  os::wget https://raw.githubusercontent.com/whatwewant/whatwewant.github.io/master/confs/tmux.conf -O $TMUX_CONF >>/dev/null

  # Reload TMUX environment so TPM is sourced:
  log::info "[$(timestamp)][package] reload tmux environment ..."
  # tmux source-file $TMUX_CONF
  #
  # Fix: https://stackoverflow.com/questions/41326985/tmux-no-server-running-on-private-tmp-tmux-502-default
  tmux start-server \; source-file $TMUX_CONF

  # clean
  log::info "[$(timestamp)][package][$name] cleaning ..."
  rm -rf $tmp_dir
}

export -f install
